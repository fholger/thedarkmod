######################################################
######################################################

!!ARBvp1.0 OPTION ARB_position_invariant;

# basic texcoord
MOV 	result.texcoord[0], vertex.texcoord[0];

#input vertex parameter 0: middle Gray value.
MOV 	result.texcoord[1], program.local[0];

#input vertex parameter 1: minimum luminance.
MOV 	result.texcoord[2], program.local[1];

#input vertex parameter 2: brightpass threshold.
MOV 	result.texcoord[3], program.local[2];

#input vertex parameter 3: brightpass offset.
MOV 	result.texcoord[4], program.local[3];
END;

######################################################
######################################################

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

#------------------------------------------
PARAM	Gamma = { 2. };
PARAM	lum_vec = { 0.2125, 0.7154, 0.0721 };
PARAM	TC_lum = { 0.5, 0.5 };
#------------------------------------------
TEMP	minLuminance, middleGray, brightPassThreshold, brightPassOffset;
TEMP	TC, adaptedLum, color, R1, R2;

MOV		TC, fragment.texcoord[0];
MOV		middleGray, fragment.texcoord[1];
MOV		minLuminance, fragment.texcoord[2];
MOV		brightPassThreshold, fragment.texcoord[3];
MOV		brightPassOffset, fragment.texcoord[4];

TEX		adaptedLum, TC_lum, texture[0], 2D;
TEX		color, TC, texture[1], 2D;

#---------------------------------------------------------
# Decode three 8 bit integer values into one float
#---------------------------------------------------------
MUL	R1.x, adaptedLum.x, 255.0;
MUL	R1.x, R1.x, 0.00390625;
MUL	R1.y, adaptedLum.y, 255.0;
MUL R1.y, R1.y, 0.00001525879;
#MUL	R1.z, adaptedLum.z, 255.0;
#MUL R1.z, R1.z, 0.00000005960464;

ADD adaptedLum, R1.x, R1.y;
#ADD adaptedLum, adaptedLum, R1.z;
#---------------------------------------------------------
# Decode High Dynamic Range from encoded Luminance
#---------------------------------------------------------
ADD		R1, 1.0, -adaptedLum;
MAX		R1, R1, 0.0001;
RCP		R1.x, R1.x;
MUL		adaptedLum, adaptedLum, R1.x;
#---------------------------------------------------------
    
#---------------------------------------------------------
# Decode High Dynamic Range for Color
#---------------------------------------------------------
ADD		R1, 1.0, -color;
MAX		R1, R1, 0.0001;
RCP		R1.x, R1.x;
RCP		R1.y, R1.y;
RCP		R1.z, R1.z;
MUL		color, color, R1;
#---------------------------------------------------------

#MAX		R1, minLuminance, adaptedLum;
MAX		R1, 0.0001, adaptedLum;
RCP		R1.x, R1.x;

MUL		R1, R1.x, middleGray;
MAD		R1, color, R1, -brightPassThreshold;

MAX		color, R1, 0.0;

#POW		color.x, color.x, Gamma.x; 
#POW		color.y, color.y, Gamma.x; 
#POW		color.z, color.z, Gamma.x; 

# Since Gamma is a fixed value, we can optimize above three lines into 1.
 
MUL		color, color, color; 

ADD		R1, brightPassOffset, color;
RCP		R1.x, R1.x;
RCP		R1.y, R1.y;
RCP		R1.z, R1.z;

MUL		result.color, color, R1;

END;