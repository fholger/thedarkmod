######################################################
######################################################

!!ARBvp1.0 OPTION ARB_position_invariant;

# basic texcoord
MOV 	result.texcoord[0], vertex.texcoord[0];

#input vertex parameter 0.x: frame-render-time / eye-exposure-adjustment-delay (in seconds)
#input vertex parameter 0.y: Maximum Luminance.
#input vertex parameter 0.z: Minimum Luminance.

MOV 	result.texcoord[1], program.local[0];

END;

######################################################
######################################################

!!ARBfp1.0 
OPTION ARB_precision_hint_fastest;

#------------------------------------------
# offsets for sample points
#------------------------------------------
PARAM	TC0 = { 0.000000, 0.000000 };
PARAM	TC1 = { 0.000000, 0.250000 };
PARAM	TC2 = { 0.000000, 0.500000 };
PARAM	TC3 = { 0.000000, 0.750000 };
PARAM	TC4 = { 0.250000, 0.000000 };
PARAM	TC5 = { 0.250000, 0.250000 };
PARAM	TC6 = { 0.250000, 0.500000 };
PARAM	TC7 = { 0.250000, 0.750000 };
PARAM	TC8 = { 0.500000, 0.000000 };
PARAM	TC9 = { 0.500000, 0.250000 };
PARAM	TC10 = { 0.500000, 0.500000 };
PARAM	TC11 = { 0.500000, 0.750000 };
PARAM	TC12 = { 0.750000, 0.000000 };
PARAM	TC13 = { 0.750000, 0.250000 };
PARAM	TC14 = { 0.750000, 0.500000 };
PARAM	TC15 = { 0.750000, 0.750000 };
#------------------------------------------
PARAM	TC = { 0.5, 0.5 };
#PARAM lum_vec = { 0.2125, 0.7154, 0.0721 };
#------------------------------------------

TEMP	color, lum, curLum, lumParms;
TEMP	prevLum, R1, R2;

TEX		lum, TC0, texture[0], 2D;

TEX		color, TC1, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC2, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC3, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC4, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC5, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC6, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC7, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC8, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC9, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC10, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC11, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC12, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC13, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC14, texture[0], 2D;
ADD		lum, lum, color;
TEX		color, TC15, texture[0], 2D;
ADD		lum, lum, color;


# average the luminance
#MUL		color, lum, 0.0625;
MUL		curLum, lum, 0.0625;

#---------------------------------------------------------
# Decode High Dynamic Range For Luminance
#---------------------------------------------------------
ADD		R1, 1.0, -curLum;
MAX		R1, R1, 0.0001;
RCP		R1.x, R1.x;
MUL		curLum, curLum, R1.x;
#---------------------------------------------------------
# fetch the previous luminance
TEX		prevLum, TC, texture[1], 2D;

#---------------------------------------------------------
# Decode two 8 bit integer values into one float
#---------------------------------------------------------

MUL		R1.x, prevLum.x, 0.99609375;
MUL		R1.y, prevLum.y, 0.0038909912109375;

ADD prevLum, R1.x, R1.y;
#---------------------------------------------------------
# Decode High Dynamic Range For Luminance
#---------------------------------------------------------
ADD		R1, 1.0, -prevLum;
MAX		R1, R1, 0.0001;
RCP		R1.x, R1.x;
MUL		prevLum, prevLum, R1.x;
#---------------------------------------------------------

# fetch parameters
MOV		lumParms, fragment.texcoord[1];

#calculate adapted luminance

#-----------------------------
#MOV		lum.x, 0.98;
#MUL		R1.x, lumParms.x, 10000.0;
#POW		R1.x, lum.x, R1.x;
#SUB		R1.x, 1, R1.x;
#SUB		lum, prevLum, curLum;
#MAD		lum, lum, R1.x, curLum;

#-----------------------------
#Use simplest formula that works ;)
#-----------------------------
LRP			lum, lumParms.x, curLum.x, prevLum.x;

# Clamp to Maximum allowed luminance
MIN		lum, lumParms.y, lum;

# Clamp to Minimum allowed luminance
MAX		lum, lumParms.z, lum;

#---------------------------------------------------------
#	Compress HDR values to 0 - 1 range
#---------------------------------------------------------
ADD		R1, 1.0, lum;
RCP		R1.x, R1.x;
MUL		lum, lum, R1.x;
MOV		R1, 0;
#---------------------------------------------------------

#------------------------------
# Encode 24 bit float into two 8 bit integer values
#------------------------------
MUL lum.x, lum.x, 256.0;
FLR R2.x, lum.x;
MUL R1.x, R2.x, 0.003921568627451;
SUB lum.x, lum.x, R2.x;
MUL lum.x, lum.x, 256.0;
FLR R2.x, lum.x;
MUL R1.y, R2.x, 0.003921568627451;
#-------------------------------
MOV result.color, R1;
#MOV result.color, lum.xxxx;


END;