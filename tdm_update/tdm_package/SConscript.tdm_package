# -*- mode: python -*-
# coding=utf-8

#*****************************************************************************
#                    The Dark Mod GPL Source Code
# 
# This file is part of the The Dark Mod Source Code, originally based 
# on the Doom 3 GPL Source Code as published in 2011.
# 
# The Dark Mod Source Code is free software: you can redistribute it 
# and/or modify it under the terms of the GNU General Public License as 
# published by the Free Software Foundation, either version 3 of the License, 
# or (at your option) any later version. For details, see LICENSE.TXT.
# 
# Project: The Dark Mod Packager (http://www.thedarkmod.com/)
# 
#*****************************************************************************

# The Dark Mod Packager build script
# Adapted from id's game sconscript
# Author: greebo

import sys, os, string

Import( 'GLOBALS' )
Import( GLOBALS )

def BuildList( s_prefix, s_string ):
	s_list = string.split( s_string )
	for i in range( len( s_list ) ):
		s_list[ i ] = s_prefix + '/' + s_list[ i ]
	return s_list

# Master list of source files to compile
tdm_package_list = BuildList('./', 'tdm_package.cpp')

local_env = g_env.Clone()
local_env.Append(CPPFLAGS = [ '-Wno-unused', '-Wno-deprecated', '-Wno-non-virtual-dtor' ])

local_env.Append(CPPPATH = '#/../../include')
local_env.Append(CPPPATH = '#/../libtdm_update')

if g_os == 'MacOSX':
	local_env.Append(LIBS = [
		File('#/../../macosx/libcurl/libcurl.a'),
	])
elif g_os == 'FreeBSD':
	# use distro installed libs - easier and safer to use 
	# shared libs for SSL
	local_env.Append(LIBS = [
		'ssl', 
		'crypto',
		File('/usr/local/lib/libcurl.a')
	])
elif g_os == 'Linux':
	# Linux
	if TARGET_ARCH == 'x86':
		local_env.Append(LIBS = [
			File('#/../../linux/libcurl/libcurl.a'),
			'stdc++fs',
		])
	elif TARGET_ARCH == 'x64':
		local_env.Append(LIBS = [
			File('#/../../linux/libcurl/lib64/libcurl.a'),
			'stdc++fs',
		])

# Build the dependencies
minizip_list = SConscript( '../SConscript.minizip' )
libtdm_update_list = SConscript( '../SConscript.libtdm_update' )

ret = local_env.Program(target = 'tdm_package', source = tdm_package_list + minizip_list + libtdm_update_list)
Return( 'ret' )
