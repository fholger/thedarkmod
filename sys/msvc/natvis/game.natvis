<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="idScreenRect">
    <DisplayString>[{x1}..{x2}] x [{y1}..{y2}] x [{zmin}..{zmax}]</DisplayString>
  </Type>

  <Type Name="CRawVector">
    <DisplayString>[{num}]{{...}}</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>m_Size</Size>
        <ValuePointer>m_Pointer</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <!-- Note: if GENTITYNUM_BITS changes, you have to update numbers/masks here too -->
  <Type Name="idEntityPtr&lt;*&gt;">
    <DisplayString Condition="spawnId == 0">Eptr (empty)</DisplayString>
    <DisplayString Condition="spawnId != 0">Eptr (num = {spawnId &amp; 0x1FFF}, spId = {spawnId &gt;&gt; 13})</DisplayString>
    <Expand>
      <Synthetic Name="[WRONG]" Condition="spawnId != 0 &amp;&amp; gameLocal.spawnIds[spawnId &amp; 0x1FFF] != spawnId &gt;&gt; 13">
        <DisplayString>set = {spawnId &gt;&gt; 13} != {gameLocal.spawnIds[spawnId &amp; 0x1FFF]} = stored</DisplayString>
      </Synthetic>
      <Item Name="[entity]" Condition="spawnId != 0">
        gameLocal.entities[spawnId &amp; 0x1FFF]
      </Item>
    </Expand>
  </Type>

  <Type Name="idEntity">
    <DisplayString IncludeView="simple">Entity[{entityNumber}]={name}</DisplayString>
    <DisplayString>Entity {name}: num={entityNumber} def={entityDefNumber}</DisplayString>
  </Type>

  <Type Name="idCVar">
    <DisplayString Condition="internalVar != 0">CVar {((idInternalCVar*)internalVar)->nameString} is: {((idInternalCVar*)internalVar)->valueString}  (default:{((idInternalCVar*)internalVar)->resetString})</DisplayString>
    <DisplayString Condition="internalVar == 0">CVar {name,na} is: {value,na}</DisplayString>
  </Type>
  
  <Type Name="idDeclLocal">
    <DisplayString>Decl {name} from {sourceFile->fileName}</DisplayString>
  </Type>
  <Type Name="idDeclFile">
    <DisplayString>DeclFile {fileName}  ({numLines} lines)</DisplayString>
    <Expand>
      <Synthetic Name="[All Decls]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>decls</HeadPointer>
            <NextPointer>nextInFile</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="Note:">
        <DisplayString>expand [Raw View] to see members</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  
  <Type Name="idVarDef">
    <DisplayString>VarDef {name->name}: {typeDef->type}</DisplayString>
    <Expand>
      <Item Name="[type]">*typeDef</Item>
      <Synthetic Name="[value]">
        <DisplayString Condition="typeDef->type == ev_void">void</DisplayString>
        <DisplayString Condition="typeDef->type == ev_namespace">namespace</DisplayString>
        <DisplayString Condition="initialized == stackVariable">stack[{value.stackOffset}]</DisplayString>
        <!-- Note: showing value is currently impossible for stack variables -->
        <DisplayString Condition="typeDef->type == ev_boolean">{value.intPtr[0] != 0}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_float">{value.floatPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_vector">{value.vectorPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_string">{value.stringPtr,s}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_function">{value.functionPtr[0]}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_virtualfunction">{value.virtualFunction}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_jumpoffset">{value.jumpOffset}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_argsize">{value.argSize}</DisplayString>
        <DisplayString Condition="typeDef->type == ev_field">{value.ptrOffset}</DisplayString>
        <!-- Note: never saw ev_object, ev_entity, ev_scriptevent being non-local -->
        <Expand>
          <ExpandedItem>value</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="initialized">initialized</Item>
      <Synthetic Name="[name]">
        <DisplayString>{name->name}</DisplayString>
        <Expand>
          <ExpandedItem>name</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="scope">scope</Item>
      <Synthetic Name="Note:">
        <DisplayString>expand [Raw View] to see members</DisplayString>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="idTypeDef">
    <DisplayString>{type} {name}</DisplayString>
  </Type>

  <Type Name="statement_s">
    <Expand>
      <Synthetic Name="[op]">
        <DisplayString>{op}:{idCompiler::opcodes[op].opname,sb}</DisplayString>
        <Expand>
          <ExpandedItem>idCompiler::opcodes[op]</ExpandedItem>
        </Expand>
      </Synthetic>
      <Item Name="[a]">*a</Item>
      <Item Name="[b]">*b</Item>
      <Item Name="[c]">*c</Item>
      <Synthetic Name="[file]">
        <DisplayString>{file}:{gameLocal.program.fileList.list[file],s}</DisplayString>
      </Synthetic>
      <Item Name="linenumber">linenumber</Item>
    </Expand>
  </Type>

  <Type Name="CRawVector">
    <DisplayString>[{m_Size} / {m_Capacity}]</DisplayString>
    <Expand>
      <ArrayItems>
        <Size>m_Size</Size>
        <ValuePointer>m_Pointer</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="emptyCommand_t" Inheritable="false">
    <DisplayString></DisplayString>
    <Expand>
      <LinkedListItems>
        <HeadPointer>this</HeadPointer>
        <NextPointer>(emptyCommand_t*)next</NextPointer>
        <ValueNode>(baseCommand_t*)this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="baseCommand_t" Inheritable="false">
    <DisplayString>{commandId}</DisplayString>
    <Expand>
      <ExpandedItem Condition="commandId==1">*(drawSurfsCommand_t*)this</ExpandedItem>
      <ExpandedItem Condition="commandId==2">*(setBufferCommand_t*)this</ExpandedItem>
      <ExpandedItem Condition="commandId==3">*(copyRenderCommand_t*)this</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="CInventory">
    <DisplayString>Inventory: {m_Category}</DisplayString>
  </Type>
  <Type Name="CInventoryCategory">
    <DisplayString>InvCat {m_Name}</DisplayString>
  </Type>
  <Type Name="CInventoryCursor">
    <DisplayString>InvCur {m_CursorId}: {m_CurrentCategory}\{m_CurrentItem}</DisplayString>
  </Type>
  <Type Name="CInventoryItem">
    <DisplayString>InvItem {m_Name} | {m_Item}</DisplayString>
  </Type>

  <!-- this is a bit hacky, but allows to inspect game entity of a render entity
       without having to enumerate all fields of idRenderEntityLocal -->
  <Type Name="renderEntity_s">
    <DisplayString IncludeView="simple">{*gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <DisplayString>renderEntity: {gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Item Name="[entity]">gameLocal.entities[entityNum]</Item>
    </Expand>
  </Type>
  <Type Name="renderLight_s">
    <DisplayString IncludeView="simple">{*gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <DisplayString>renderLight: {gameLocal.entities[entityNum],view(simple)}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Item Name="[entity]">gameLocal.entities[entityNum]</Item>
    </Expand>
  </Type>
  <Type Name="idRenderEntityLocal">
    <DisplayString IncludeView="simple">{parms,view(simple)}</DisplayString>
    <DisplayString>idRenderEntity: {parms,view(simple)}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All refAreas]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>entityRefs</HeadPointer>
            <NextPointer>ownerNext</NextPointer>
            <ValueNode>area</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All interactions]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>firstInteraction</HeadPointer>
            <NextPointer>entityNext</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="idRenderLightLocal">
    <DisplayString IncludeView="simple">{parms,view(simple)}</DisplayString>
    <DisplayString>idRenderLight: {parms,view(simple)}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All refAreas]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>references</HeadPointer>
            <NextPointer>ownerNext</NextPointer>
            <ValueNode>area</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All interactions]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>firstInteraction</HeadPointer>
            <NextPointer>lightNext</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="viewEntity_s">
    <DisplayString>viewEntity: {entityDef->parms,view(simple)}</DisplayString>
  </Type>
  <Type Name="viewLight_s">
    <DisplayString>viewLight: {lightDef->parms,view(simple)}</DisplayString>
  </Type>

  <Type Name="idInteraction">
    <DisplayString>interaction({numSurfaces}): {*lightDef,view(simple)} &amp; {*entityDef,view(simple)}</DisplayString>
  </Type>
  <Type Name="portalArea_s">
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All entityRefs]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>entityRefs.areaNext</HeadPointer>
            <NextPointer>areaNext</NextPointer>
            <ValueNode>entity</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All lightRefs]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>lightRefs.areaNext</HeadPointer>
            <NextPointer>areaNext</NextPointer>
            <ValueNode>light</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="doublePortal_s">
    <DisplayString>dblPortal: {portals[0].intoArea} | {portals[1].intoArea}  block={blockingBits}</DisplayString>
  </Type>


  <!-- dmap has a habit of storing triangles in linked list -->
  <Type Name="mapTri_s">
    <DisplayString>{v[0].xyz} {v[1].xyz} {v[2].xyz}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All tris]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>this</HeadPointer>
            <NextPointer>next</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="srfTriangles_s">
    <DisplayString>srfTriangles V{numVerts} I{numIndexes}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All verts]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numVerts</Size>
            <ValuePointer>verts</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All indexes]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numIndexes</Size>
            <ValuePointer>indexes</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All silEdges]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numSilEdges</Size>
            <ValuePointer>silEdges</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
      <Synthetic Condition="facePlanesCalculated" Name="[All planes]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numIndexes/3</Size>
            <ValuePointer>facePlanes</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="silEdge_s">
    <DisplayString>V: {v1} -> {v2}    P: {p1} | {p2}</DisplayString>
  </Type>

  <Type Name="viewDef_s">
    <DisplayString>{renderView}</DisplayString>
    <Expand>
      <ExpandedItem>this,!</ExpandedItem>
      <Synthetic Name="[All viewLights]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>viewLights</HeadPointer>
            <NextPointer>next</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All viewEntitys]" ExcludeView="raw">
        <Expand>
          <LinkedListItems>
            <HeadPointer>viewEntitys</HeadPointer>
            <NextPointer>next</NextPointer>
            <ValueNode>this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All drawSurfs]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numDrawSurfs</Size>
            <ValuePointer>drawSurfs</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
      <Synthetic Name="[All clipPlanes]" ExcludeView="raw">
        <Expand>
          <ArrayItems>
            <Size>numClipPlanes</Size>
            <ValuePointer>clipPlanes</ValuePointer>
          </ArrayItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

</AutoVisualizer>
